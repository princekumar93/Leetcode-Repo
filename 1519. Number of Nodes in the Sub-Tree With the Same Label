class Solution {
    unordered_map<int, vector<int>> g;
public:
    vector<int> countSubTrees(int n, vector<vector<int>>& edges, string labels) 
    {
        for(vector<int> &e: edges)
        {
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        vector<int> ans(n, 0);
        dfs(0, -1, labels, ans);
        return ans;
    }
    
    vector<int> dfs(int index, int parent, string &labels, vector<int> &ans)
    {
        vector<int> nodeCounts(26);
        nodeCounts[labels[index] - 'a'] = 1;
        
        for(int &n: g[index])
        {
            if(n != parent)
            {
                vector<int> childCounts = dfs(n, index, labels, ans);

                for (int i = 0; i < 26; i++) 
                    nodeCounts[i] += childCounts[i];
            }
        }
        
        ans[index] = nodeCounts[labels[index] - 'a'];
        return nodeCounts;
    }
};
